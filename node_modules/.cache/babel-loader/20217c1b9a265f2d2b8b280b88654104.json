{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadal-atrash/Downloads/main-template-2/netstorm-template-v1.0/src/components/Auctions/DisplayNFT.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport NFTManagerABI from './NFTManagerABI.json'; // Import your contract ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass DisplayNFT extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tokenURI: '',\n      tokenId: 1,\n      // Assuming you want to display the first minted token\n      imgSrc: ''\n    };\n  }\n  async componentDidMount() {\n    await this.loadBlockchainData();\n  }\n  async loadBlockchainData() {\n    const web3 = new Web3(new Web3.providers.HttpProvider(\"https://sepolia.infura.io/v3/b2e950fb6dfb4ece9d7b84ea0cce4c93\"));\n    const networkId = await web3.eth.net.getId();\n    const NFTManagerAddress = '0x6960Dbc55282Ac60da31277E3233c8f3c2b6c764'; // Replace with your deployed contract address\n    const nftManager = new web3.eth.Contract(NFTManagerABI, NFTManagerAddress);\n    const tokenURI = await nftManager.methods.tokenURI(this.state.tokenId).call();\n    this.setState({\n      tokenURI\n    });\n\n    // Assuming the tokenURI is an IPFS link or a URL to a JSON file containing metadata\n    const response = await fetch(`https://ipfs.io/ipfs/${tokenURI}`);\n    const metadata = await response.json();\n    this.setState({\n      imgSrc: metadata.image\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-over\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"card-img-top\",\n          src: this.state.imgSrc,\n          alt: \"NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-caption col-12 p-0\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mb-0\",\n            children: [\"Minted NFT #\", this.state.tokenId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://ipfs.io/ipfs/${this.state.tokenURI}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"View Metadata\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default DisplayNFT;","map":{"version":3,"names":["React","Component","Web3","NFTManagerABI","jsxDEV","_jsxDEV","DisplayNFT","constructor","args","state","tokenURI","tokenId","imgSrc","componentDidMount","loadBlockchainData","web3","providers","HttpProvider","networkId","eth","net","getId","NFTManagerAddress","nftManager","Contract","methods","call","setState","response","fetch","metadata","json","image","render","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel"],"sources":["/Users/muhammadal-atrash/Downloads/main-template-2/netstorm-template-v1.0/src/components/Auctions/DisplayNFT.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport NFTManagerABI from './NFTManagerABI.json'; // Import your contract ABI\n\nclass DisplayNFT extends Component {\n    state = {\n        tokenURI: '',\n        tokenId: 1, // Assuming you want to display the first minted token\n        imgSrc: '',\n    };\n\n    async componentDidMount() {\n        await this.loadBlockchainData();\n    }\n\n    async loadBlockchainData() {\n        const web3 = new Web3(new Web3.providers.HttpProvider(\"https://sepolia.infura.io/v3/b2e950fb6dfb4ece9d7b84ea0cce4c93\"));\n        const networkId = await web3.eth.net.getId();\n        const NFTManagerAddress = '0x6960Dbc55282Ac60da31277E3233c8f3c2b6c764'; // Replace with your deployed contract address\n        const nftManager = new web3.eth.Contract(NFTManagerABI, NFTManagerAddress);\n\n        const tokenURI = await nftManager.methods.tokenURI(this.state.tokenId).call();\n        this.setState({ tokenURI });\n\n        // Assuming the tokenURI is an IPFS link or a URL to a JSON file containing metadata\n        const response = await fetch(`https://ipfs.io/ipfs/${tokenURI}`);\n        const metadata = await response.json();\n        this.setState({ imgSrc: metadata.image });\n    }\n\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"image-over\">\n                    <img className=\"card-img-top\" src={this.state.imgSrc} alt=\"NFT\" />\n                </div>\n                <div className=\"card-caption col-12 p-0\">\n                    <div className=\"card-body\">\n                        <h5 className=\"mb-0\">Minted NFT #{this.state.tokenId}</h5>\n                        <a href={`https://ipfs.io/ipfs/${this.state.tokenURI}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                            View Metadata\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayNFT;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}